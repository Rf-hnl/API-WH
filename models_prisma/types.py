# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Tenant types

class TenantOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Tenant create method"""
    id: _str
    whatsappMessages: 'WhatsappMessageCreateManyNestedWithoutRelationsInput'


class TenantCreateInput(TenantOptionalCreateInput):
    """Required arguments to the Tenant create method"""
    name: _str
    twilioAccountSid: _str
    twilioAuthToken: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TenantOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Tenant create method, without relations"""
    id: _str


class TenantCreateWithoutRelationsInput(TenantOptionalCreateWithoutRelationsInput):
    """Required arguments to the Tenant create method, without relations"""
    name: _str
    twilioAccountSid: _str
    twilioAuthToken: _str

class TenantConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TenantCreateWithoutRelationsInput'
    where: 'TenantWhereUniqueInput'

class TenantCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TenantCreateWithoutRelationsInput'
    connect: 'TenantWhereUniqueInput'
    connect_or_create: 'TenantConnectOrCreateWithoutRelationsInput'


class TenantCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TenantCreateWithoutRelationsInput', List['TenantCreateWithoutRelationsInput']]
    connect: Union['TenantWhereUniqueInput', List['TenantWhereUniqueInput']]
    connect_or_create: Union['TenantConnectOrCreateWithoutRelationsInput', List['TenantConnectOrCreateWithoutRelationsInput']]

_TenantWhereUnique_id_Input = TypedDict(
    '_TenantWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_TenantWhereUnique_name_Input = TypedDict(
    '_TenantWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

TenantWhereUniqueInput = Union[
    '_TenantWhereUnique_id_Input',
    '_TenantWhereUnique_name_Input',
]


class TenantUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    twilioAccountSid: _str
    twilioAuthToken: _str
    whatsappMessages: 'WhatsappMessageUpdateManyWithoutRelationsInput'


class TenantUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    twilioAccountSid: _str
    twilioAuthToken: _str


class TenantUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TenantCreateWithoutRelationsInput']
    connect: List['TenantWhereUniqueInput']
    connect_or_create: List['TenantConnectOrCreateWithoutRelationsInput']
    set: List['TenantWhereUniqueInput']
    disconnect: List['TenantWhereUniqueInput']
    delete: List['TenantWhereUniqueInput']

    # TODO
    # update: List['TenantUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TenantUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TenantScalarWhereInput']
    # upsert: List['TenantUpserteWithWhereUniqueWithoutRelationsInput']


class TenantUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TenantCreateWithoutRelationsInput'
    connect: 'TenantWhereUniqueInput'
    connect_or_create: 'TenantConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TenantUpdateInput'
    # upsert: 'TenantUpsertWithoutRelationsInput'


class TenantUpsertInput(TypedDict):
    create: 'TenantCreateInput'
    update: 'TenantUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Tenant_id_OrderByInput = TypedDict(
    '_Tenant_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Tenant_name_OrderByInput = TypedDict(
    '_Tenant_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Tenant_twilioAccountSid_OrderByInput = TypedDict(
    '_Tenant_twilioAccountSid_OrderByInput',
    {
        'twilioAccountSid': 'SortOrder',
    },
    total=True
)

_Tenant_twilioAuthToken_OrderByInput = TypedDict(
    '_Tenant_twilioAuthToken_OrderByInput',
    {
        'twilioAuthToken': 'SortOrder',
    },
    total=True
)

_Tenant_RelevanceInner = TypedDict(
    '_Tenant_RelevanceInner',
    {
        'fields': 'List[TenantScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Tenant_RelevanceOrderByInput = TypedDict(
    '_Tenant_RelevanceOrderByInput',
    {
        '_relevance': '_Tenant_RelevanceInner',
    },
    total=True
)

TenantOrderByInput = Union[
    '_Tenant_id_OrderByInput',
    '_Tenant_name_OrderByInput',
    '_Tenant_twilioAccountSid_OrderByInput',
    '_Tenant_twilioAuthToken_OrderByInput',
    '_Tenant_RelevanceOrderByInput',
]



# recursive Tenant types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TenantRelationFilter = TypedDict(
    'TenantRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TenantListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TenantInclude(TypedDict, total=False):
    """Tenant relational arguments"""
    whatsappMessages: Union[bool, 'FindManyWhatsappMessageArgsFromTenant']


    

class TenantIncludeFromTenant(TypedDict, total=False):
    """Relational arguments for Tenant"""
    whatsappMessages: Union[bool, 'FindManyWhatsappMessageArgsFromTenantRecursive1']


class TenantIncludeFromTenantRecursive1(TypedDict, total=False):
    """Relational arguments for Tenant"""
    whatsappMessages: Union[bool, 'FindManyWhatsappMessageArgsFromTenantRecursive2']


class TenantIncludeFromTenantRecursive2(TypedDict, total=False):
    """Relational arguments for Tenant"""
    whatsappMessages: Union[bool, 'FindManyWhatsappMessageArgsFromTenantRecursive3']


class TenantIncludeFromTenantRecursive3(TypedDict, total=False):
    """Relational arguments for Tenant"""
    whatsappMessages: Union[bool, 'FindManyWhatsappMessageArgsFromTenantRecursive4']


class TenantIncludeFromTenantRecursive4(TypedDict, total=False):
    """Relational arguments for Tenant"""

    

class TenantArgsFromTenant(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'TenantIncludeFromTenantRecursive1'


class TenantArgsFromTenantRecursive1(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'TenantIncludeFromTenantRecursive2'


class TenantArgsFromTenantRecursive2(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'TenantIncludeFromTenantRecursive3'


class TenantArgsFromTenantRecursive3(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'TenantIncludeFromTenantRecursive4'


class TenantArgsFromTenantRecursive4(TypedDict, total=False):
    """Arguments for Tenant"""
    
    

class FindManyTenantArgsFromTenant(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive1'


class FindManyTenantArgsFromTenantRecursive1(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive2'


class FindManyTenantArgsFromTenantRecursive2(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive3'


class FindManyTenantArgsFromTenantRecursive3(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive4'


class FindManyTenantArgsFromTenantRecursive4(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    
    

class WhatsappMessageIncludeFromTenant(TypedDict, total=False):
    """Relational arguments for Tenant"""
    tenant: Union[bool, 'TenantArgsFromTenantRecursive1']


class WhatsappMessageIncludeFromTenantRecursive1(TypedDict, total=False):
    """Relational arguments for Tenant"""
    tenant: Union[bool, 'TenantArgsFromTenantRecursive2']


class WhatsappMessageIncludeFromTenantRecursive2(TypedDict, total=False):
    """Relational arguments for Tenant"""
    tenant: Union[bool, 'TenantArgsFromTenantRecursive3']


class WhatsappMessageIncludeFromTenantRecursive3(TypedDict, total=False):
    """Relational arguments for Tenant"""
    tenant: Union[bool, 'TenantArgsFromTenantRecursive4']


class WhatsappMessageIncludeFromTenantRecursive4(TypedDict, total=False):
    """Relational arguments for Tenant"""

    

class WhatsappMessageArgsFromTenant(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive1'


class WhatsappMessageArgsFromTenantRecursive1(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive2'


class WhatsappMessageArgsFromTenantRecursive2(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive3'


class WhatsappMessageArgsFromTenantRecursive3(TypedDict, total=False):
    """Arguments for Tenant"""
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive4'


class WhatsappMessageArgsFromTenantRecursive4(TypedDict, total=False):
    """Arguments for Tenant"""
    
    

class FindManyWhatsappMessageArgsFromTenant(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['WhatsappMessageOrderByInput', List['WhatsappMessageOrderByInput']]
    where: 'WhatsappMessageWhereInput'
    cursor: 'WhatsappMessageWhereUniqueInput'
    distinct: List['WhatsappMessageScalarFieldKeys']
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive1'


class FindManyWhatsappMessageArgsFromTenantRecursive1(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['WhatsappMessageOrderByInput', List['WhatsappMessageOrderByInput']]
    where: 'WhatsappMessageWhereInput'
    cursor: 'WhatsappMessageWhereUniqueInput'
    distinct: List['WhatsappMessageScalarFieldKeys']
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive2'


class FindManyWhatsappMessageArgsFromTenantRecursive2(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['WhatsappMessageOrderByInput', List['WhatsappMessageOrderByInput']]
    where: 'WhatsappMessageWhereInput'
    cursor: 'WhatsappMessageWhereUniqueInput'
    distinct: List['WhatsappMessageScalarFieldKeys']
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive3'


class FindManyWhatsappMessageArgsFromTenantRecursive3(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['WhatsappMessageOrderByInput', List['WhatsappMessageOrderByInput']]
    where: 'WhatsappMessageWhereInput'
    cursor: 'WhatsappMessageWhereUniqueInput'
    distinct: List['WhatsappMessageScalarFieldKeys']
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive4'


class FindManyWhatsappMessageArgsFromTenantRecursive4(TypedDict, total=False):
    """Arguments for Tenant"""
    take: int
    skip: int
    order_by: Union['WhatsappMessageOrderByInput', List['WhatsappMessageOrderByInput']]
    where: 'WhatsappMessageWhereInput'
    cursor: 'WhatsappMessageWhereUniqueInput'
    distinct: List['WhatsappMessageScalarFieldKeys']
    


FindManyTenantArgs = FindManyTenantArgsFromTenant
FindFirstTenantArgs = FindManyTenantArgsFromTenant


    

class TenantWhereInput(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    twilioAccountSid: Union[_str, 'types.StringFilter']
    twilioAuthToken: Union[_str, 'types.StringFilter']
    whatsappMessages: 'WhatsappMessageListRelationFilter'

    # should be noted that AND and NOT should be Union['TenantWhereInputRecursive1', List['TenantWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TenantWhereInputRecursive1']
    OR: List['TenantWhereInputRecursive1']
    NOT: List['TenantWhereInputRecursive1']


class TenantWhereInputRecursive1(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    twilioAccountSid: Union[_str, 'types.StringFilter']
    twilioAuthToken: Union[_str, 'types.StringFilter']
    whatsappMessages: 'WhatsappMessageListRelationFilter'

    # should be noted that AND and NOT should be Union['TenantWhereInputRecursive2', List['TenantWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TenantWhereInputRecursive2']
    OR: List['TenantWhereInputRecursive2']
    NOT: List['TenantWhereInputRecursive2']


class TenantWhereInputRecursive2(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    twilioAccountSid: Union[_str, 'types.StringFilter']
    twilioAuthToken: Union[_str, 'types.StringFilter']
    whatsappMessages: 'WhatsappMessageListRelationFilter'

    # should be noted that AND and NOT should be Union['TenantWhereInputRecursive3', List['TenantWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TenantWhereInputRecursive3']
    OR: List['TenantWhereInputRecursive3']
    NOT: List['TenantWhereInputRecursive3']


class TenantWhereInputRecursive3(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    twilioAccountSid: Union[_str, 'types.StringFilter']
    twilioAuthToken: Union[_str, 'types.StringFilter']
    whatsappMessages: 'WhatsappMessageListRelationFilter'

    # should be noted that AND and NOT should be Union['TenantWhereInputRecursive4', List['TenantWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TenantWhereInputRecursive4']
    OR: List['TenantWhereInputRecursive4']
    NOT: List['TenantWhereInputRecursive4']


class TenantWhereInputRecursive4(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    twilioAccountSid: Union[_str, 'types.StringFilter']
    twilioAuthToken: Union[_str, 'types.StringFilter']
    whatsappMessages: 'WhatsappMessageListRelationFilter'



# aggregate Tenant types


    

class TenantScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    twilioAccountSid: Union[_str, 'types.StringWithAggregatesFilter']
    twilioAuthToken: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TenantScalarWhereWithAggregatesInputRecursive1']
    OR: List['TenantScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TenantScalarWhereWithAggregatesInputRecursive1']


class TenantScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    twilioAccountSid: Union[_str, 'types.StringWithAggregatesFilter']
    twilioAuthToken: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TenantScalarWhereWithAggregatesInputRecursive2']
    OR: List['TenantScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TenantScalarWhereWithAggregatesInputRecursive2']


class TenantScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    twilioAccountSid: Union[_str, 'types.StringWithAggregatesFilter']
    twilioAuthToken: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TenantScalarWhereWithAggregatesInputRecursive3']
    OR: List['TenantScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TenantScalarWhereWithAggregatesInputRecursive3']


class TenantScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    twilioAccountSid: Union[_str, 'types.StringWithAggregatesFilter']
    twilioAuthToken: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TenantScalarWhereWithAggregatesInputRecursive4']
    OR: List['TenantScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TenantScalarWhereWithAggregatesInputRecursive4']


class TenantScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Tenant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    twilioAccountSid: Union[_str, 'types.StringWithAggregatesFilter']
    twilioAuthToken: Union[_str, 'types.StringWithAggregatesFilter']



class TenantGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    twilioAccountSid: _str
    twilioAuthToken: _str
    _sum: 'TenantSumAggregateOutput'
    _avg: 'TenantAvgAggregateOutput'
    _min: 'TenantMinAggregateOutput'
    _max: 'TenantMaxAggregateOutput'
    _count: 'TenantCountAggregateOutput'


class TenantAvgAggregateOutput(TypedDict, total=False):
    """Tenant output for aggregating averages"""


class TenantSumAggregateOutput(TypedDict, total=False):
    """Tenant output for aggregating sums"""


class TenantScalarAggregateOutput(TypedDict, total=False):
    """Tenant output including scalar fields"""
    id: _str
    name: _str
    twilioAccountSid: _str
    twilioAuthToken: _str


TenantMinAggregateOutput = TenantScalarAggregateOutput
TenantMaxAggregateOutput = TenantScalarAggregateOutput


class TenantMaxAggregateInput(TypedDict, total=False):
    """Tenant input for aggregating by max"""
    id: bool
    name: bool
    twilioAccountSid: bool
    twilioAuthToken: bool


class TenantMinAggregateInput(TypedDict, total=False):
    """Tenant input for aggregating by min"""
    id: bool
    name: bool
    twilioAccountSid: bool
    twilioAuthToken: bool


class TenantNumberAggregateInput(TypedDict, total=False):
    """Tenant input for aggregating numbers"""


TenantAvgAggregateInput = TenantNumberAggregateInput
TenantSumAggregateInput = TenantNumberAggregateInput


TenantCountAggregateInput = TypedDict(
    'TenantCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'twilioAccountSid': bool,
        'twilioAuthToken': bool,
        '_all': bool,
    },
    total=False,
)

TenantCountAggregateOutput = TypedDict(
    'TenantCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'twilioAccountSid': int,
        'twilioAuthToken': int,
        '_all': int,
    },
    total=False,
)


TenantKeys = Literal[
    'id',
    'name',
    'twilioAccountSid',
    'twilioAuthToken',
    'whatsappMessages',
]
TenantScalarFieldKeys = Literal[
    'id',
    'name',
    'twilioAccountSid',
    'twilioAuthToken',
]
TenantScalarFieldKeysT = TypeVar('TenantScalarFieldKeysT', bound=TenantScalarFieldKeys)

TenantRelationalFieldKeys = Literal[
        'whatsappMessages',
    ]

# WhatsappMessage types

class WhatsappMessageOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the WhatsappMessage create method"""
    id: _str
    tenantId: _str
    tenant: 'TenantCreateNestedWithoutRelationsInput'
    messageSid: Optional[_str]
    contentVariables: Optional[_str]
    errorMessage: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class WhatsappMessageCreateInput(WhatsappMessageOptionalCreateInput):
    """Required arguments to the WhatsappMessage create method"""
    fromNumber: _str
    toNumber: _str
    contentSid: _str
    status: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class WhatsappMessageOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the WhatsappMessage create method, without relations"""
    id: _str
    tenantId: _str
    messageSid: Optional[_str]
    contentVariables: Optional[_str]
    errorMessage: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class WhatsappMessageCreateWithoutRelationsInput(WhatsappMessageOptionalCreateWithoutRelationsInput):
    """Required arguments to the WhatsappMessage create method, without relations"""
    fromNumber: _str
    toNumber: _str
    contentSid: _str
    status: _str

class WhatsappMessageConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'WhatsappMessageCreateWithoutRelationsInput'
    where: 'WhatsappMessageWhereUniqueInput'

class WhatsappMessageCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'WhatsappMessageCreateWithoutRelationsInput'
    connect: 'WhatsappMessageWhereUniqueInput'
    connect_or_create: 'WhatsappMessageConnectOrCreateWithoutRelationsInput'


class WhatsappMessageCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['WhatsappMessageCreateWithoutRelationsInput', List['WhatsappMessageCreateWithoutRelationsInput']]
    connect: Union['WhatsappMessageWhereUniqueInput', List['WhatsappMessageWhereUniqueInput']]
    connect_or_create: Union['WhatsappMessageConnectOrCreateWithoutRelationsInput', List['WhatsappMessageConnectOrCreateWithoutRelationsInput']]

_WhatsappMessageWhereUnique_id_Input = TypedDict(
    '_WhatsappMessageWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_WhatsappMessageWhereUnique_messageSid_Input = TypedDict(
    '_WhatsappMessageWhereUnique_messageSid_Input',
    {
        'messageSid': '_str',
    },
    total=True
)

WhatsappMessageWhereUniqueInput = Union[
    '_WhatsappMessageWhereUnique_id_Input',
    '_WhatsappMessageWhereUnique_messageSid_Input',
]


class WhatsappMessageUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    tenant: 'TenantUpdateOneWithoutRelationsInput'
    messageSid: Optional[_str]
    fromNumber: _str
    toNumber: _str
    contentSid: _str
    contentVariables: Optional[_str]
    status: _str
    errorMessage: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class WhatsappMessageUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    messageSid: Optional[_str]
    fromNumber: _str
    toNumber: _str
    contentSid: _str
    contentVariables: Optional[_str]
    status: _str
    errorMessage: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class WhatsappMessageUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['WhatsappMessageCreateWithoutRelationsInput']
    connect: List['WhatsappMessageWhereUniqueInput']
    connect_or_create: List['WhatsappMessageConnectOrCreateWithoutRelationsInput']
    set: List['WhatsappMessageWhereUniqueInput']
    disconnect: List['WhatsappMessageWhereUniqueInput']
    delete: List['WhatsappMessageWhereUniqueInput']

    # TODO
    # update: List['WhatsappMessageUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['WhatsappMessageUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['WhatsappMessageScalarWhereInput']
    # upsert: List['WhatsappMessageUpserteWithWhereUniqueWithoutRelationsInput']


class WhatsappMessageUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'WhatsappMessageCreateWithoutRelationsInput'
    connect: 'WhatsappMessageWhereUniqueInput'
    connect_or_create: 'WhatsappMessageConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'WhatsappMessageUpdateInput'
    # upsert: 'WhatsappMessageUpsertWithoutRelationsInput'


class WhatsappMessageUpsertInput(TypedDict):
    create: 'WhatsappMessageCreateInput'
    update: 'WhatsappMessageUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_WhatsappMessage_id_OrderByInput = TypedDict(
    '_WhatsappMessage_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_tenantId_OrderByInput = TypedDict(
    '_WhatsappMessage_tenantId_OrderByInput',
    {
        'tenantId': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_messageSid_OrderByInput = TypedDict(
    '_WhatsappMessage_messageSid_OrderByInput',
    {
        'messageSid': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_fromNumber_OrderByInput = TypedDict(
    '_WhatsappMessage_fromNumber_OrderByInput',
    {
        'fromNumber': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_toNumber_OrderByInput = TypedDict(
    '_WhatsappMessage_toNumber_OrderByInput',
    {
        'toNumber': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_contentSid_OrderByInput = TypedDict(
    '_WhatsappMessage_contentSid_OrderByInput',
    {
        'contentSid': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_contentVariables_OrderByInput = TypedDict(
    '_WhatsappMessage_contentVariables_OrderByInput',
    {
        'contentVariables': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_status_OrderByInput = TypedDict(
    '_WhatsappMessage_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_errorMessage_OrderByInput = TypedDict(
    '_WhatsappMessage_errorMessage_OrderByInput',
    {
        'errorMessage': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_createdAt_OrderByInput = TypedDict(
    '_WhatsappMessage_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_updatedAt_OrderByInput = TypedDict(
    '_WhatsappMessage_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_RelevanceInner = TypedDict(
    '_WhatsappMessage_RelevanceInner',
    {
        'fields': 'List[WhatsappMessageScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_WhatsappMessage_RelevanceOrderByInput = TypedDict(
    '_WhatsappMessage_RelevanceOrderByInput',
    {
        '_relevance': '_WhatsappMessage_RelevanceInner',
    },
    total=True
)

WhatsappMessageOrderByInput = Union[
    '_WhatsappMessage_id_OrderByInput',
    '_WhatsappMessage_tenantId_OrderByInput',
    '_WhatsappMessage_messageSid_OrderByInput',
    '_WhatsappMessage_fromNumber_OrderByInput',
    '_WhatsappMessage_toNumber_OrderByInput',
    '_WhatsappMessage_contentSid_OrderByInput',
    '_WhatsappMessage_contentVariables_OrderByInput',
    '_WhatsappMessage_status_OrderByInput',
    '_WhatsappMessage_errorMessage_OrderByInput',
    '_WhatsappMessage_createdAt_OrderByInput',
    '_WhatsappMessage_updatedAt_OrderByInput',
    '_WhatsappMessage_RelevanceOrderByInput',
]



# recursive WhatsappMessage types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

WhatsappMessageRelationFilter = TypedDict(
    'WhatsappMessageRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class WhatsappMessageListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class WhatsappMessageInclude(TypedDict, total=False):
    """WhatsappMessage relational arguments"""
    tenant: Union[bool, 'TenantArgsFromWhatsappMessage']


    

class TenantIncludeFromWhatsappMessage(TypedDict, total=False):
    """Relational arguments for WhatsappMessage"""
    whatsappMessages: Union[bool, 'FindManyWhatsappMessageArgsFromWhatsappMessageRecursive1']


class TenantIncludeFromWhatsappMessageRecursive1(TypedDict, total=False):
    """Relational arguments for WhatsappMessage"""
    whatsappMessages: Union[bool, 'FindManyWhatsappMessageArgsFromWhatsappMessageRecursive2']


class TenantIncludeFromWhatsappMessageRecursive2(TypedDict, total=False):
    """Relational arguments for WhatsappMessage"""
    whatsappMessages: Union[bool, 'FindManyWhatsappMessageArgsFromWhatsappMessageRecursive3']


class TenantIncludeFromWhatsappMessageRecursive3(TypedDict, total=False):
    """Relational arguments for WhatsappMessage"""
    whatsappMessages: Union[bool, 'FindManyWhatsappMessageArgsFromWhatsappMessageRecursive4']


class TenantIncludeFromWhatsappMessageRecursive4(TypedDict, total=False):
    """Relational arguments for WhatsappMessage"""

    

class TenantArgsFromWhatsappMessage(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    include: 'TenantIncludeFromTenantRecursive1'


class TenantArgsFromWhatsappMessageRecursive1(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    include: 'TenantIncludeFromTenantRecursive2'


class TenantArgsFromWhatsappMessageRecursive2(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    include: 'TenantIncludeFromTenantRecursive3'


class TenantArgsFromWhatsappMessageRecursive3(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    include: 'TenantIncludeFromTenantRecursive4'


class TenantArgsFromWhatsappMessageRecursive4(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    
    

class FindManyTenantArgsFromWhatsappMessage(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive1'


class FindManyTenantArgsFromWhatsappMessageRecursive1(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive2'


class FindManyTenantArgsFromWhatsappMessageRecursive2(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive3'


class FindManyTenantArgsFromWhatsappMessageRecursive3(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    include: 'TenantIncludeFromTenantRecursive4'


class FindManyTenantArgsFromWhatsappMessageRecursive4(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    take: int
    skip: int
    order_by: Union['TenantOrderByInput', List['TenantOrderByInput']]
    where: 'TenantWhereInput'
    cursor: 'TenantWhereUniqueInput'
    distinct: List['TenantScalarFieldKeys']
    
    

class WhatsappMessageIncludeFromWhatsappMessage(TypedDict, total=False):
    """Relational arguments for WhatsappMessage"""
    tenant: Union[bool, 'TenantArgsFromWhatsappMessageRecursive1']


class WhatsappMessageIncludeFromWhatsappMessageRecursive1(TypedDict, total=False):
    """Relational arguments for WhatsappMessage"""
    tenant: Union[bool, 'TenantArgsFromWhatsappMessageRecursive2']


class WhatsappMessageIncludeFromWhatsappMessageRecursive2(TypedDict, total=False):
    """Relational arguments for WhatsappMessage"""
    tenant: Union[bool, 'TenantArgsFromWhatsappMessageRecursive3']


class WhatsappMessageIncludeFromWhatsappMessageRecursive3(TypedDict, total=False):
    """Relational arguments for WhatsappMessage"""
    tenant: Union[bool, 'TenantArgsFromWhatsappMessageRecursive4']


class WhatsappMessageIncludeFromWhatsappMessageRecursive4(TypedDict, total=False):
    """Relational arguments for WhatsappMessage"""

    

class WhatsappMessageArgsFromWhatsappMessage(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive1'


class WhatsappMessageArgsFromWhatsappMessageRecursive1(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive2'


class WhatsappMessageArgsFromWhatsappMessageRecursive2(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive3'


class WhatsappMessageArgsFromWhatsappMessageRecursive3(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive4'


class WhatsappMessageArgsFromWhatsappMessageRecursive4(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    
    

class FindManyWhatsappMessageArgsFromWhatsappMessage(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    take: int
    skip: int
    order_by: Union['WhatsappMessageOrderByInput', List['WhatsappMessageOrderByInput']]
    where: 'WhatsappMessageWhereInput'
    cursor: 'WhatsappMessageWhereUniqueInput'
    distinct: List['WhatsappMessageScalarFieldKeys']
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive1'


class FindManyWhatsappMessageArgsFromWhatsappMessageRecursive1(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    take: int
    skip: int
    order_by: Union['WhatsappMessageOrderByInput', List['WhatsappMessageOrderByInput']]
    where: 'WhatsappMessageWhereInput'
    cursor: 'WhatsappMessageWhereUniqueInput'
    distinct: List['WhatsappMessageScalarFieldKeys']
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive2'


class FindManyWhatsappMessageArgsFromWhatsappMessageRecursive2(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    take: int
    skip: int
    order_by: Union['WhatsappMessageOrderByInput', List['WhatsappMessageOrderByInput']]
    where: 'WhatsappMessageWhereInput'
    cursor: 'WhatsappMessageWhereUniqueInput'
    distinct: List['WhatsappMessageScalarFieldKeys']
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive3'


class FindManyWhatsappMessageArgsFromWhatsappMessageRecursive3(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    take: int
    skip: int
    order_by: Union['WhatsappMessageOrderByInput', List['WhatsappMessageOrderByInput']]
    where: 'WhatsappMessageWhereInput'
    cursor: 'WhatsappMessageWhereUniqueInput'
    distinct: List['WhatsappMessageScalarFieldKeys']
    include: 'WhatsappMessageIncludeFromWhatsappMessageRecursive4'


class FindManyWhatsappMessageArgsFromWhatsappMessageRecursive4(TypedDict, total=False):
    """Arguments for WhatsappMessage"""
    take: int
    skip: int
    order_by: Union['WhatsappMessageOrderByInput', List['WhatsappMessageOrderByInput']]
    where: 'WhatsappMessageWhereInput'
    cursor: 'WhatsappMessageWhereUniqueInput'
    distinct: List['WhatsappMessageScalarFieldKeys']
    


FindManyWhatsappMessageArgs = FindManyWhatsappMessageArgsFromWhatsappMessage
FindFirstWhatsappMessageArgs = FindManyWhatsappMessageArgsFromWhatsappMessage


    

class WhatsappMessageWhereInput(TypedDict, total=False):
    """WhatsappMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    tenantId: Union[_str, 'types.StringFilter']
    tenant: 'TenantRelationFilter'
    messageSid: Union[None, _str, 'types.StringFilter']
    fromNumber: Union[_str, 'types.StringFilter']
    toNumber: Union[_str, 'types.StringFilter']
    contentSid: Union[_str, 'types.StringFilter']
    contentVariables: Union[None, _str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['WhatsappMessageWhereInputRecursive1', List['WhatsappMessageWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['WhatsappMessageWhereInputRecursive1']
    OR: List['WhatsappMessageWhereInputRecursive1']
    NOT: List['WhatsappMessageWhereInputRecursive1']


class WhatsappMessageWhereInputRecursive1(TypedDict, total=False):
    """WhatsappMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    tenantId: Union[_str, 'types.StringFilter']
    tenant: 'TenantRelationFilter'
    messageSid: Union[None, _str, 'types.StringFilter']
    fromNumber: Union[_str, 'types.StringFilter']
    toNumber: Union[_str, 'types.StringFilter']
    contentSid: Union[_str, 'types.StringFilter']
    contentVariables: Union[None, _str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['WhatsappMessageWhereInputRecursive2', List['WhatsappMessageWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['WhatsappMessageWhereInputRecursive2']
    OR: List['WhatsappMessageWhereInputRecursive2']
    NOT: List['WhatsappMessageWhereInputRecursive2']


class WhatsappMessageWhereInputRecursive2(TypedDict, total=False):
    """WhatsappMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    tenantId: Union[_str, 'types.StringFilter']
    tenant: 'TenantRelationFilter'
    messageSid: Union[None, _str, 'types.StringFilter']
    fromNumber: Union[_str, 'types.StringFilter']
    toNumber: Union[_str, 'types.StringFilter']
    contentSid: Union[_str, 'types.StringFilter']
    contentVariables: Union[None, _str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['WhatsappMessageWhereInputRecursive3', List['WhatsappMessageWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['WhatsappMessageWhereInputRecursive3']
    OR: List['WhatsappMessageWhereInputRecursive3']
    NOT: List['WhatsappMessageWhereInputRecursive3']


class WhatsappMessageWhereInputRecursive3(TypedDict, total=False):
    """WhatsappMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    tenantId: Union[_str, 'types.StringFilter']
    tenant: 'TenantRelationFilter'
    messageSid: Union[None, _str, 'types.StringFilter']
    fromNumber: Union[_str, 'types.StringFilter']
    toNumber: Union[_str, 'types.StringFilter']
    contentSid: Union[_str, 'types.StringFilter']
    contentVariables: Union[None, _str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['WhatsappMessageWhereInputRecursive4', List['WhatsappMessageWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['WhatsappMessageWhereInputRecursive4']
    OR: List['WhatsappMessageWhereInputRecursive4']
    NOT: List['WhatsappMessageWhereInputRecursive4']


class WhatsappMessageWhereInputRecursive4(TypedDict, total=False):
    """WhatsappMessage arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    tenantId: Union[_str, 'types.StringFilter']
    tenant: 'TenantRelationFilter'
    messageSid: Union[None, _str, 'types.StringFilter']
    fromNumber: Union[_str, 'types.StringFilter']
    toNumber: Union[_str, 'types.StringFilter']
    contentSid: Union[_str, 'types.StringFilter']
    contentVariables: Union[None, _str, 'types.StringFilter']
    status: Union[_str, 'types.StringFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate WhatsappMessage types


    

class WhatsappMessageScalarWhereWithAggregatesInput(TypedDict, total=False):
    """WhatsappMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    tenantId: Union[_str, 'types.StringWithAggregatesFilter']
    messageSid: Union[_str, 'types.StringWithAggregatesFilter']
    fromNumber: Union[_str, 'types.StringWithAggregatesFilter']
    toNumber: Union[_str, 'types.StringWithAggregatesFilter']
    contentSid: Union[_str, 'types.StringWithAggregatesFilter']
    contentVariables: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive1']
    OR: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive1']
    NOT: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive1']


class WhatsappMessageScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """WhatsappMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    tenantId: Union[_str, 'types.StringWithAggregatesFilter']
    messageSid: Union[_str, 'types.StringWithAggregatesFilter']
    fromNumber: Union[_str, 'types.StringWithAggregatesFilter']
    toNumber: Union[_str, 'types.StringWithAggregatesFilter']
    contentSid: Union[_str, 'types.StringWithAggregatesFilter']
    contentVariables: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive2']
    OR: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive2']
    NOT: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive2']


class WhatsappMessageScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """WhatsappMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    tenantId: Union[_str, 'types.StringWithAggregatesFilter']
    messageSid: Union[_str, 'types.StringWithAggregatesFilter']
    fromNumber: Union[_str, 'types.StringWithAggregatesFilter']
    toNumber: Union[_str, 'types.StringWithAggregatesFilter']
    contentSid: Union[_str, 'types.StringWithAggregatesFilter']
    contentVariables: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive3']
    OR: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive3']
    NOT: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive3']


class WhatsappMessageScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """WhatsappMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    tenantId: Union[_str, 'types.StringWithAggregatesFilter']
    messageSid: Union[_str, 'types.StringWithAggregatesFilter']
    fromNumber: Union[_str, 'types.StringWithAggregatesFilter']
    toNumber: Union[_str, 'types.StringWithAggregatesFilter']
    contentSid: Union[_str, 'types.StringWithAggregatesFilter']
    contentVariables: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive4']
    OR: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive4']
    NOT: List['WhatsappMessageScalarWhereWithAggregatesInputRecursive4']


class WhatsappMessageScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """WhatsappMessage arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    tenantId: Union[_str, 'types.StringWithAggregatesFilter']
    messageSid: Union[_str, 'types.StringWithAggregatesFilter']
    fromNumber: Union[_str, 'types.StringWithAggregatesFilter']
    toNumber: Union[_str, 'types.StringWithAggregatesFilter']
    contentSid: Union[_str, 'types.StringWithAggregatesFilter']
    contentVariables: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class WhatsappMessageGroupByOutput(TypedDict, total=False):
    id: _str
    tenantId: _str
    messageSid: _str
    fromNumber: _str
    toNumber: _str
    contentSid: _str
    contentVariables: _str
    status: _str
    errorMessage: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'WhatsappMessageSumAggregateOutput'
    _avg: 'WhatsappMessageAvgAggregateOutput'
    _min: 'WhatsappMessageMinAggregateOutput'
    _max: 'WhatsappMessageMaxAggregateOutput'
    _count: 'WhatsappMessageCountAggregateOutput'


class WhatsappMessageAvgAggregateOutput(TypedDict, total=False):
    """WhatsappMessage output for aggregating averages"""


class WhatsappMessageSumAggregateOutput(TypedDict, total=False):
    """WhatsappMessage output for aggregating sums"""


class WhatsappMessageScalarAggregateOutput(TypedDict, total=False):
    """WhatsappMessage output including scalar fields"""
    id: _str
    tenantId: _str
    messageSid: _str
    fromNumber: _str
    toNumber: _str
    contentSid: _str
    contentVariables: _str
    status: _str
    errorMessage: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


WhatsappMessageMinAggregateOutput = WhatsappMessageScalarAggregateOutput
WhatsappMessageMaxAggregateOutput = WhatsappMessageScalarAggregateOutput


class WhatsappMessageMaxAggregateInput(TypedDict, total=False):
    """WhatsappMessage input for aggregating by max"""
    id: bool
    tenantId: bool
    messageSid: bool
    fromNumber: bool
    toNumber: bool
    contentSid: bool
    contentVariables: bool
    status: bool
    errorMessage: bool
    createdAt: bool
    updatedAt: bool


class WhatsappMessageMinAggregateInput(TypedDict, total=False):
    """WhatsappMessage input for aggregating by min"""
    id: bool
    tenantId: bool
    messageSid: bool
    fromNumber: bool
    toNumber: bool
    contentSid: bool
    contentVariables: bool
    status: bool
    errorMessage: bool
    createdAt: bool
    updatedAt: bool


class WhatsappMessageNumberAggregateInput(TypedDict, total=False):
    """WhatsappMessage input for aggregating numbers"""


WhatsappMessageAvgAggregateInput = WhatsappMessageNumberAggregateInput
WhatsappMessageSumAggregateInput = WhatsappMessageNumberAggregateInput


WhatsappMessageCountAggregateInput = TypedDict(
    'WhatsappMessageCountAggregateInput',
    {
        'id': bool,
        'tenantId': bool,
        'messageSid': bool,
        'fromNumber': bool,
        'toNumber': bool,
        'contentSid': bool,
        'contentVariables': bool,
        'status': bool,
        'errorMessage': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

WhatsappMessageCountAggregateOutput = TypedDict(
    'WhatsappMessageCountAggregateOutput',
    {
        'id': int,
        'tenantId': int,
        'messageSid': int,
        'fromNumber': int,
        'toNumber': int,
        'contentSid': int,
        'contentVariables': int,
        'status': int,
        'errorMessage': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


WhatsappMessageKeys = Literal[
    'id',
    'tenantId',
    'tenant',
    'messageSid',
    'fromNumber',
    'toNumber',
    'contentSid',
    'contentVariables',
    'status',
    'errorMessage',
    'createdAt',
    'updatedAt',
]
WhatsappMessageScalarFieldKeys = Literal[
    'id',
    'tenantId',
    'messageSid',
    'fromNumber',
    'toNumber',
    'contentSid',
    'contentVariables',
    'status',
    'errorMessage',
    'createdAt',
    'updatedAt',
]
WhatsappMessageScalarFieldKeysT = TypeVar('WhatsappMessageScalarFieldKeysT', bound=WhatsappMessageScalarFieldKeys)

WhatsappMessageRelationalFieldKeys = Literal[
        'tenant',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields